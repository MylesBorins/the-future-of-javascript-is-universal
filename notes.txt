* What is Universal?
  - Isomorphic vs Universal
* Why write universal?
* Environments
  - Browser
  - Node
  - Others?
    - Deno
    - Edge workers
    - Embedded systems
    - gsuite
    - BigQuery
* APIs
  - console
  - webcrypto
  - url
  - fetch
  - performance
* Project FUGU
* Differences
  - Streams
  - Event Emmiters
* Standards
  * W3C
    - wasm
    - FUGU apis
    - import maps
  * WHATWG
    - JSON Modules
    - Streams
  * TC39
    - ESM
    - import.meta
    - Module Attributes
    - bult in modules
* Tools
  - Pika
  - Webpack
  - rollup
* Debugging
* Libraries
  - TensorFlow.js


---


* The future of Universal JavaScript

  - what gets in the way?
    - platform specific flags / environment
  - some modules may be specific to an environment
  - issue with common.js, had to strip it all out to even get it workign in the browser
    - somewhat true about node.js apis as well
  - people wanted to use the new module standard because it is what the browser would use, but how they wrote it can never be run in the browser
  - for 5 years people thought modules existed, but they didn't actually
  - File paths can make things difficult
    - need to normalize between environments
    - absolute paths are not reconcilable
  - Where does the platform end?
    - Is this thing I'm writing part of the platform?
  - Streams!
  - Standards to king make vs grassroots to gain ecosystem adoption
    - E_TOO_MANY_VENDORS
      - TC39
      - W3C (many different groups)
      - WHATWG
      - IEFT
      - IANA
  - Good examples of existing "standard" universal modules
    - console
    - URL
    - 
  - where do namespaces fit in?
  - The future of JSON Modules (and other such module e.g. css / html / wasm)
  - types of tooling
    - do more by doing less
    - begining to create a nihilistic view of the future
    - should be progressive
  - where do built ins fit in this?

* Hack on modules
  - NVM_NODEJS_ORG_MIRROR=https://nodejs.org/download/test/ nvm i test201911116cb54c73da

* Dual Mode modules
  - What are they
  - How does it work?

* Export Maps
  - conditional exports
    - Alternative entry points for browsers
  - vision for interaction with import maps

* import maps
  - relative urls on other domains???

* loaders
  - Current limitations e.g. network / filesystem

* The future of tooling

* Packaging
  - web packaging

* Future of the VM module
  - realms???

* Signed Packages

* Caching of modules on the web


