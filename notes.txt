* What is Universal?
  - Isomorphic vs Universal
* What is Isomorphics JavaScript
* Why write universal?
* What gets in the way of Universal
  * Platform Specific requirements
  * Othering
  * The Browser vs. Node.js
    * Change mental model
    * Many Environments
      - Browser
      - Node
      - Others?
        - Deno
        - Edge workers
        - Embedded systems
        - gsuite
        - BigQuery
  * Module loader
    - Specifier resolution
    - Historic code that runs nowhere
  * Platform specific APIs
    - Streams
    - Event Emmiters
  * Where does the platform end?
  * Nihilistic transpilation
* Universal JavaScript as a platform concern
  * Standards
    * TC39
      - ESM
      - import.meta
      - Module Attributes
      - bult in modules
    * W3C
      - wasm
      - FUGU apis
      - import maps
    * WHATWG
      - JSON Modules
      - Streams
    * APIs
      - console
      - webcrypto
      - url
      - fetch
      - performance
    * Project FUGU
* Tools
  - Pika
  - Webpack
  - rollup
* The Interface vs The Plumbing
  - TensorFlow.js
  - Node.js module implementation
* Universal JavaScript as a platform ethos
  - Where do we collaborate on meta concenrs

---

Glossay:

TC39

ECMA262

W3C

WICG

WHATWG

Primordials

ESM

CJS

Realm

Instrinsic

Primordial



--


* The future of Universal JavaScript

  - what gets in the way?
    - platform specific flags / environment
  - some modules may be specific to an environment
  - issue with common.js, had to strip it all out to even get it workign in the browser
    - somewhat true about node.js apis as well
  - people wanted to use the new module standard because it is what the browser would use, but how they wrote it can never be run in the browser
  - for 5 years people thought modules existed, but they didn't actually
  - File paths can make things difficult
    - need to normalize between environments
    - absolute paths are not reconcilable
  - Where does the platform end?
    - Is this thing I'm writing part of the platform?
  - Streams!
  - Standards to king make vs grassroots to gain ecosystem adoption
    - E_TOO_MANY_VENDORS
      - TC39
      - W3C (many different groups)
      - WHATWG
      - IEFT
      - IANA
  - Good examples of existing "standard" universal modules
    - console
    - URL
    - 
  - where do namespaces fit in?
  - The future of JSON Modules (and other such module e.g. css / html / wasm)
  - types of tooling
    - do more by doing less
    - begining to create a nihilistic view of the future
    - should be progressive
  - where do built ins fit in this?

* Hack on modules
  - NVM_NODEJS_ORG_MIRROR=https://nodejs.org/download/test/ nvm i test201911116cb54c73da

* Dual Mode modules
  - What are they
  - How does it work?

* Export Maps
  - conditional exports
    - Alternative entry points for browsers
  - vision for interaction with import maps

* import maps
  - relative urls on other domains???

* loaders
  - Current limitations e.g. network / filesystem

* The future of tooling

* Packaging
  - web packaging

* Future of the VM module
  - realms???

* Signed Packages

* Caching of modules on the web


